name: CI/CD - Docker Build & Deploy

on:
  push:
    branches:
      - main  # O la rama que estés utilizando

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # ✅ 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v2

      # ✅ 2. Login en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ 3. Construir y subir la imagen del Backend (Node.js)
      - name: Build and Push Server Docker Image
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/gemeni_pinecone:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/gemeni_pinecone:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into EC2 and Deploy Containers
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_CLIENT_SERVER }}
          username: ubuntu
          key: ${{ secrets.CLIENT_SERVER_KEY }}
          script: |
            # ✅ Instalar Docker si no está instalado
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable --now docker
            fi
            # Hacer que Docker se inicie automáticamente
            sudo systemctl enable --now docker

            # ✅ Descargar las últimas imágenes desde Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/gemeni_pinecone:latest

            # Verificar si las imágenes fueron descargadas correctamente
            sudo docker images

            # Detener y eliminar los contenedores existentes
            sudo docker stop gemeni_pinecone || true
            sudo docker rm gemeni_pinecone || true

            # Verificar las variables de entorno antes de generar el archivo
            echo "Base de datos: $GOOGLE_API_KEY"

            # Crear el archivo .env directamente en el directorio actual
            echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
            echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env

            # Verificar que el archivo .env se ha creado correctamente
            cat .env

            # ✅ Iniciar el Backend (Node.js) con `.env`
            sudo docker run -d -p 4000:4000 --env-file .env --name gemeni_pinecone ${{ secrets.DOCKER_USERNAME }}/gemeni_pinecone:latest

            # ✅ Verificar que el contenedor está corriendo
            sudo docker ps -a
